cmake_minimum_required(VERSION 3.16)
project(dottalkpp LANGUAGES CXX)

# -------- Toolchain / Defaults --------
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

if(MSVC)
  add_compile_options(/W4 /permissive-)
else()
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# -------- Paths --------
set(CCODE_ROOT ${CMAKE_SOURCE_DIR})
set(CCODE_INC  ${CCODE_ROOT}/include)
set(CCODE_SRC  ${CCODE_ROOT}/src)
set(CCODE_XB   ${CCODE_SRC}/xbase)
set(CCODE_CLI  ${CCODE_SRC}/cli)

# -------- Status Banner --------
message(STATUS "================================================")
message(STATUS "  Source dir : ${CCODE_ROOT}")
message(STATUS "  Build dir  : ${CMAKE_BINARY_DIR}")
message(STATUS "  xBase impl : SPLIT (dbf_file/record_view/fields)")
message(STATUS "  CLI dir    : ${CCODE_CLI}")
message(STATUS "================================================")

# -------- Indexing Scaffold (external library) --------
# Builds target 'xindex' and publishes its include dirs.
add_subdirectory(externals/xindex_scaffold)

# === Feature toggle (no extra sources/libs needed) ===
option(DOTTALK_WITH_INDEX "Enable xindex integration in code via a define" OFF)

# -------- xbase library --------
file(GLOB_RECURSE XBASE_SOURCES
  ${CCODE_XB}/*.cpp
)
add_library(xbase ${XBASE_SOURCES})

# If you enabled the diagnostic earlier, you can re-enable it here:
# if (MSVC)
#   target_compile_options(xbase PRIVATE /showIncludes)
# endif()

target_include_directories(xbase
  PUBLIC
    ${CCODE_INC}
)

# Link the external index scaffold
target_link_libraries(xbase PUBLIC xindex)

# Propagate the feature define (no duplicate libs / sources)
if (DOTTALK_WITH_INDEX)
  target_compile_definitions(xbase PUBLIC DOTTALK_WITH_INDEX=1)
endif()

# -------- dottalkpp executable (CLI) --------
file(GLOB CLI_SOURCES
  ${CCODE_CLI}/*.cpp
)
add_executable(dottalkpp ${CLI_SOURCES})

target_link_libraries(dottalkpp
  PRIVATE
    xbase
)

# -------- Output folders (nice on multi-config) --------
if(CMAKE_CONFIGURATION_TYPES)
  foreach(cfg ${CMAKE_CONFIGURATION_TYPES})
    string(TOUPPER "${cfg}" cfgU)
    set_target_properties(dottalkpp PROPERTIES
      RUNTIME_OUTPUT_DIRECTORY_${cfgU} "${CMAKE_BINARY_DIR}/bin/${cfg}"
    )
    set_target_properties(xbase PROPERTIES
      ARCHIVE_OUTPUT_DIRECTORY_${cfgU} "${CMAKE_BINARY_DIR}/lib/${cfg}"
      LIBRARY_OUTPUT_DIRECTORY_${cfgU} "${CMAKE_BINARY_DIR}/lib/${cfg}"
    )
  endforeach()
else()
  set_target_properties(dottalkpp PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")
  set_target_properties(xbase PROPERTIES
    ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib"
    LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib"
  )
endif()

# ------------------ (Optional note) ------------------
# If in the future you *do* add in-tree index sources (e.g. index/*.cpp),
# guard them like this to avoid configure errors when they are absent:
#
# set(_idx_root "${CMAKE_CURRENT_SOURCE_DIR}/index")
# if (EXISTS "${_idx_root}/bptree_backend.cpp")
#   message(STATUS "Using in-tree index backends from ${_idx_root}")
#   target_sources(xbase PRIVATE
#     index/bptree_backend.cpp
#     index/legacy_c_backend.cpp
#     index/index_manager.cpp
#     index/key_codec.cpp
#   )
# else()
#   message(STATUS "No in-tree index/*.cpp; using external xindex only")
# endif()
