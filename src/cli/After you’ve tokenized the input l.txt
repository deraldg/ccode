// After youâ€™ve tokenized the input line into vector<string> toks (uppercased),
// and before dispatching to a handler:

auto join_key = [](const std::vector<std::string>& t, int n){
    std::string k;
    for (int i = 0; i < n && i < (int)t.size(); ++i) {
        if (i) k.push_back(' ');
        k += t[i];
    }
    return k;
};

std::string key;
int consumed = 0;

// Try 3-word, then 2-word, then 1-word keys (longest match wins)
for (int n = 3; n >= 1; --n) {
    std::string cand = join_key(toks, n);  // e.g., "SET INDEX TO"
    if (cli::reg.exists(cand)) {           // your registry has an exists/contains
        key = cand;
        consumed = n;
        break;
    }
}

// If not found, unknown command
if (key.empty()) {
    std::cout << "Unknown command: " << (toks.empty() ? "" : toks[0]) << "\n";
    continue;
}

// Build the arg string from remaining tokens
std::ostringstream rest;
for (size_t i = consumed; i < toks.size(); ++i) {
    if (i > (size_t)consumed) rest << ' ';
    rest << toks[i_original_indices[i]];   // if you kept original-case tokens
}
std::istringstream iss(rest.str());

// Dispatch
cli::reg.invoke(key, area, iss);
